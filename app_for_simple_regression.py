# -*- coding: utf-8 -*-
"""App for simple regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VbDNs7DU6GZHc2YjwdNDcrZwR2MKassd
"""
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt



st.title("ðŸ“ˆ Simple Linear Regression Interactive Plot")

# Generate sample data
np.random.seed(42)
x_data = np.linspace(-5, 10, 50) # Changed x_data range to include negative values
true_slope = 2.5
true_intercept = 1.0
noise = np.random.normal(0, 2, size=x_data.shape)
y_data = true_slope * x_data + true_intercept + noise

# Sidebar sliders for slope and intercept
st.sidebar.header("ðŸ”§ Adjust Parameters")
m = st.sidebar.slider("Slope $\hat{Î²}_1=$", min_value=-10.0, max_value=10.0, value=1.0, step=0.1)
b = st.sidebar.slider("Intercept Î²â‚€=", min_value=-10.0, max_value=10.0, value=0.0, step=0.1)

# Calculate predicted y values
y_pred = m * x_data + b

# Plotting
fig, ax = plt.subplots()
ax.scatter(x_data, y_data, label="Data", color='blue')
ax.plot(x_data, y_pred, label=f"y = {m:.2f}x + {b:.2f}", color='red')
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.legend()
ax.grid(True)

# Add lines for the axes crossing in black
ax.axhline(0, color='black', lw=1)
ax.axvline(0, color='black', lw=1)




st.pyplot(fig)

# Optional display of equation
st.markdown(f"### ðŸ“Œ Current Line Equation: `y = {m:.2f}x + ({b:.2f})`")

